#!/usr/bin/env python

"""
Usage:
    market chain <code>
    market stock <code>
    market portfolio
"""


__version__ = '0.0.1'


from datetime import datetime

import sys

from docopt import docopt

from market import portfolio
from market import api


def intword(n):
    n = n / (1000000.0)
    if n > 1000:
        l = 'b'
        n = n / 1000
    else:
        l = 'm'
    ret = '%7.2f' % n
    return ret + l


def perc(f):
    ret = '%7.2f%%' % f
    return ret


def do_stock(code):
    nasdaq = api.Nasdaq()
    data = nasdaq.summary(code)

    estimate = api.Estimize().estimate(code)

    trailing_eps = sum(
        estimate[x].earnings.actual for x in estimate.keys()[-5:-1])
    trailing_earnings = trailing_eps * data['outstanding']
    trailing_revenue = sum(
        estimate[x].revenue.actual for x in estimate.keys()[-5:-1]) * 1000000

    future_eps = sum(
        estimate[x].earnings.actual for x in estimate.keys()[-4:-1]
            ) + estimate[estimate.keys()[-1]].earnings.wallst
    future_earnings = future_eps * data['outstanding']
    future_revenue = (sum(
        estimate[x].revenue.actual for x in estimate.keys()[-4:-1]
            ) + estimate[estimate.keys()[-1]].revenue.wallst) * 1000000

    print '%s %s' % (code.upper(), data['quote'])
    print
    print '    Market cap:', intword(data['market_cap'])
    print '    Yield:     ', perc(data['current_yield'])

    income = nasdaq.income_statement_annual(code)
    print
    print '    Income: Reports', estimate.to_report.strftime('%b %d'), \
        '-', (estimate.to_report - datetime.now()).days, 'days'

    """
    def fmt_eps(name, revenue, eps):
        name = str(name)
        print '\t', \
            name, \
            ' '*(8-len(name)), \
            intword(revenue), \
            '   ', \
            '%7.2f' % eps, \
            '  ', \
            '%5.2f' % (data['quote'] / eps), \
            '  ', \
            '%5.2f' % (data['market_cap'] / float(revenue))
    fmt_eps('future', future_revenue, future_eps)
    fmt_eps('trailing', trailing_revenue, trailing_eps)
    print
    """

    def fmt(name, revenue, earnings):
        name = str(name)
        print '\t', \
            name, \
            ' '*(8-len(name)), \
            intword(revenue), \
            '  ', \
            intword(earnings), \
            '  ', \
            '%5.2f' % (data['market_cap'] / earnings), \
            '  ', \
            '%5.2f' % (data['market_cap'] / float(revenue))

    fmt('future', future_revenue, future_earnings)
    fmt('trailing', trailing_revenue, trailing_earnings)
    for period in income:
        fmt(period.year, income[period]['sales'], income[period]['earnings'])

    print
    print '    Balance sheet:'
    sheet = nasdaq.balance_sheet_annual(code)
    for period in sheet:
        print '\t', \
            period.year, \
            '  ', \
            intword(sheet[period]['total_assets']), \
            '  ', \
            intword(sheet[period]['total_liabilities']), \
            '  ', \
            intword(sheet[period]['total_equity']), \
            '  ', \
            '%.2f' % (
                data['market_cap'] / float(sheet[period]['total_equity']))


def do_portfolio():
    p = portfolio.Portfolio()

    for spread in p.spreads:
        print spread


def do_chain(code):
    quote = api.YQL().option_chain(code)
    for expiry in quote:
        print expiry


def main(argv):
    if argv.get('stock'):
        code = argv['<code>']
        return do_stock(code)

    if argv.get('portfolio'):
        return do_portfolio()

    if argv.get('chain'):
        code = argv['<code>']
        return do_chain(code)


if __name__ == '__main__':
    argv = docopt(__doc__, version=__version__)
    sys.exit(main(argv))
