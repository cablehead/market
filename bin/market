#!/usr/bin/env python

"""
Usage:
    market stock <code>
    market trailing <code>
    market scan <filename>
    market review <watch> <positions>
    market p <watch>
    market chain <code> [<expiry>
        [--strike=<strike>] [--offset=<offset>] [--type=<type>]]
    market call_spread <code>
    market portfolio
    market roll <code> <expiry> <typ> <strike>

Options:
    -s <strike> --strike==<strike>  # specific strike
    -o <offset> --offset==<offset>  # offset
    -t <type> --type==<type>  # option type: c or p
"""


__version__ = '0.0.1'


from datetime import datetime

import sys
import os

from dateutil.parser import parse

from docopt import docopt

import tradier

from market import portfolio
from market import api
from market import p


def intword(n):
    n = n / (1000000.0)
    if n > 1000:
        l = 'b'
        n = n / 1000
    else:
        l = 'm'
    ret = '%7.2f' % n
    return ret + l


def perc(f):
    ret = '%7.2f%%' % f
    return ret


def do_roll(code, expiry, typ, strike):
    trad = tradier.Tradier(os.environ['TRADIER_ACCESS_TOKEN'])

    def togo(dt):
        now = datetime.now()
        return (parse(dt) - now).days + 1

    def contract(code, expiry, typ, strike):
        chain = trad.options.chains(code, expiry)
        contract = [
            x for x in chain if
            x['strike'] == strike and
            x['option_type'] == typ][0]
        contract['mid'] = (contract['ask'] + contract['bid']) / 2
        return contract

    expirations = trad.options.expirations(code)
    start = expirations.index(expiry)

    possible = [x for x in expirations[start:] if togo(x) < 100]

    first = None
    for expiry in possible:
        mid = contract(code, expiry, typ, strike)['mid']
        if not first:
            first = mid

        print '%s %3s %6.2f %6.2f %6.2f' % (
            expiry,
            togo(expiry),
            mid,
            mid - first,
            100*((mid - first) / togo(expiry)),
            )

    return


def do_stock(code):
    nasdaq = api.Nasdaq()
    data = nasdaq.summary(code)
    estimate = api.Estimize().estimate(code)
    income = nasdaq.income_statement_annual(code)

    if estimate:
        trailing_eps = sum(
            estimate[x].earnings.actual for x in estimate.keys()[-5:-1])
        trailing_earnings = trailing_eps * data['outstanding']
        trailing_revenue = sum(
            estimate[x].revenue.actual for x in estimate.keys()[-5:-1]
            ) * 1000000

        future_eps = sum(
            estimate[x].earnings.actual for x in estimate.keys()[-4:-1]
            ) + estimate[estimate.keys()[-1]].earnings.wallst
        future_earnings = future_eps * data['outstanding']
        future_revenue = (sum(
            estimate[x].revenue.actual for x in estimate.keys()[-4:-1]
            ) + estimate[estimate.keys()[-1]].revenue.wallst) * 1000000

    print '%s %s' % (code.upper(), data['quote'])
    print
    print '    Market cap:', intword(data['market_cap'])
    print '    Yield:     ', perc(data['current_yield'])
    if data['ex_dividend_date']:
        print '    Ex Div:      ', \
            data['ex_dividend_date'].strftime('%b %d')
    print '    Industry:  ', data['industry']

    income = nasdaq.income_statement_annual(code)
    if estimate:
        print
        print '    Income: Reports', estimate.to_report.strftime('%b %d'), \
            '-', (estimate.to_report - datetime.now()).days, 'days'

    """
    def fmt_eps(name, revenue, eps):
        name = str(name)
        print '\t', \
            name, \
            ' '*(8-len(name)), \
            intword(revenue), \
            '   ', \
            '%7.2f' % eps, \
            '  ', \
            '%5.2f' % (data['quote'] / eps), \
            '  ', \
            '%5.2f' % (data['market_cap'] / float(revenue))
    fmt_eps('future', future_revenue, future_eps)
    fmt_eps('trailing', trailing_revenue, trailing_eps)
    print
    """

    def fmt(name, revenue, earnings):
        name = str(name)
        print '\t', \
            name, \
            ' '*(8-len(name)), \
            intword(revenue), \
            '  ', \
            intword(earnings), \
            '  ', \
            '%5.2f' % (data['market_cap'] / earnings), \
            '  ', \
            '%5.2f' % (data['market_cap'] / float(revenue))

    if estimate:
        fmt('future', future_revenue, future_earnings)
        fmt('trailing', trailing_revenue, trailing_earnings)
    for period in income:
        fmt(period.year, income[period]['sales'], income[period]['earnings'])

    print
    print '    Balance sheet:'
    sheet = nasdaq.balance_sheet_annual(code)
    for period in sheet:
        print '\t', \
            period.year, \
            '  ', \
            intword(sheet[period]['total_assets']), \
            '  ', \
            intword(sheet[period]['total_liabilities']), \
            '  ', \
            intword(sheet[period]['total_equity']), \
            '  ', \
            '%.2f' % (
                data['market_cap'] / float(sheet[period]['total_equity']))


def do_trailing(code):
    nasdaq = api.Nasdaq()
    data = nasdaq.summary(code)
    income = nasdaq.income_statement_quarterly(code)
    for key in income:
        print key.strftime('%Y-%m-%d'), intword(income[key]['earnings'])
    total = sum([x['earnings'] for x in income.values()])
    print "          ", intword(total)


def do_scan(filename):
    nasdaq = api.Nasdaq()
    lines = open(filename).readlines()
    codes = [x.strip() for x in lines if x.strip()]

    for code in codes:
        summary = nasdaq.summary(code)
        estimate = api.Estimize().estimate(code)
        print '%-6s %s %s' % (
            code,
            summary['quote'],
            estimate.to_report.strftime('%b %d'))
        chain = api.Google().option_chain(code)
        for expiry in chain:
            if expiry.togo > 30 and expiry.togo < 60:
                strike = expiry.p.near(summary['quote']*.95, 1)[1]
                print expiry.togo, strike.mid, strike.strike, strike.ratio, strike.ratio_annual


def do_p(watch):
    nasdaq = api.Nasdaq()

    lines = open(watch).readlines()
    codes = set([x.strip().upper() for x in lines if x.strip()])

    rows = []

    color_codes = p.ColorDistinct()

    header = [
        p.Column('code', color=color_codes.get),
        p.Column('quote', fmt='.2f'),
        p.Column('direction'),
        p.Column('change', fmt='.2f'),
        p.Column('%', fmt='.2f'), ]

    import json

    """
    for code in codes:
        summary = nasdaq.summary(code)
        delta = summary['quote'] - summary['previous_close']
        if delta >= 0:
            direction = u'\u25B2'
        else:
            direction = u'\u25BC'
        order = delta
        delta = abs(delta)
        perc = (delta / summary['previous_close']) * 100
        row = [code, summary['quote'], direction, delta, perc]
        row = [header[i].format(value) for i, value in enumerate(row)]
        rows.append(row)

    rows.sort(key=lambda x: (x[2], x[3]))

    print rows
    open('foo.json', 'w').write(json.dumps(rows))
    """

    rows = json.load(open('foo.json'))
    lengths = [0] * len(rows[0])

    for row in rows:
        lengths = [max(lengths[i], len(value)) for i, value in enumerate(row)]

    d = p.D()

    for row in rows:
        for i, value in enumerate(row):
            d.write(
                value, width=lengths[i]+1, color=header[i].color(value))
        d.nl()

    d.terminal.move_left(d.num_cols)


def watch_split(codes, color_codes):
    nasdaq = api.Nasdaq()

    rows = []

    header = [
        p.Column('code', color=color_codes.get),
        p.Column('quote', fmt='.2f'),
        p.Column('direction', color={u'\u25B2': 65,  u'\u25BC': 68}.get),
        p.Column('change', fmt='.2f'),
        p.Column('%', fmt='.2f'), ]

    for code in codes:
        summary = nasdaq.summary(code)
        delta = summary['quote'] - summary['previous_close']
        if delta >= 0:
            direction = u'\u25B2'
        else:
            direction = u'\u25BC'
        perc = (delta / summary['previous_close']) * 100
        order = perc
        delta = abs(delta)
        perc = abs(perc)
        row = [code, summary['quote'], direction, delta, perc]
        row = [header[i].format(value) for i, value in enumerate(row)]
        rows.append((order, row))

    rows.sort(key=lambda x: x[0])
    rows.reverse()
    rows = [x[1] for x in rows]

    lengths = [0] * len(rows[0])

    for row in rows:
        lengths = [
            max(lengths[i], len(value)) for i, value in enumerate(row)]

    split = p.Split()

    for row in rows:
        for i, value in enumerate(row):
            split.write(
                value, width=lengths[i]+1, color=header[i].color(value))
        split.nl()

    return split


def do_review(watch, positions):
    # import fabulous
    # print help(fabulous)

    sixtohex = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff, ]

    def ntorgb(n):
        n -= 16
        b = n % 6
        g = (n / 6) % 6
        r = (n / 6 / 6) % 6
        return [sixtohex[x] for x in (r, g, b)]

    def rgbton(rgb):
        r, g, b = [sixtohex.index(code) for code in rgb]
        n = b + (6 * g) + (6 * 6 * r) + 16
        return n

    def rgbdistance(rgb1, rgb2):
        return sum(abs(rgb1[i] - rgb2[i]) for i in xrange(3))

    def rgbmix(rgbs):
        import copy
        rgbs = copy.copy(rgbs)
        mix = []
        while rgbs:
            mix.append(rgbs.pop())
            rgbs.sort(key=lambda item: sum(rgbdistance(x, item) for x in mix))
        return mix

    rng = []

    for i in range(16, 232):
        keep = True
        rgb = ntorgb(i)
        if rgbdistance(rgb, [60, 60, 60]) > 240:
            for check in rng:
                if rgbdistance(rgb, check) < 180:
                    keep = False
                    break
            if keep:
                rng.append(rgb)

    rng = rgbmix(rng)
    rng = [rgbton(x) for x in rng]

    from fabulous.color import fg256

    rng.reverse()
    # print rng
    # print ''.join(str(fg256(i, 'A')) for i in rng)
    ####

    color_codes = p.ColorDistinct()

    nasdaq = api.Nasdaq()

    lines = open(watch).readlines()
    codes = set([x.strip().upper() for x in lines if x.strip()])

    trad = tradier.Tradier(os.environ['TRADIER_ACCESS_TOKEN'])

    class Day(object):
        def __init__(self, dt):
            self.dt = dt
            self.positions = []
            self.earnings = []

        def pprint(self, split):
            first = True
            def preample(first):
                if first:
                    split.write('%-4s %6s' % (
                        (self.dt - datetime.now()).days+1,
                        self.dt.strftime('%b %d'), ))
                else:
                    split.write('%-4s %6s' % ('', ''))
                return False

            if self.earnings:
                first = preample(first)
                split.write('      -] ')
                for i, code in enumerate(self.earnings):
                    split.write(code, color=color_codes.get(code))
                    if i != len(self.earnings) - 1:
                        split.write(', ')
                split.nl()

            self.positions.sort(key=lambda x: x.code)
            for position in self.positions:
                first = preample(first)
                position.pprint(split)
                split.nl()

    chain_cache = {}

    class Position(object):
        def __init__(self, code, expiry, strike, typ, n, cost):
            self.code = code
            self.expiry = expiry
            self.strike = strike
            self.typ = typ
            self.n = n
            self.cost = cost

        @property
        def contract(self):
            # print self.code, self.expiry, self.typ, self.strike

            key = (self.code, self.expiry)
            if not key in chain_cache:
                chain_cache[key] = trad.options.chains(self.code, self.expiry)
            chain = chain_cache[key]

            option_type = 'call' if self.typ == 'C' else 'put'

            class Contract(object):
                def __init__(self, contract):
                    self.contract = contract

                @property
                def mid(self):
                    return (self.contract['bid'] + self.contract['ask']) / 2

            contracts = [
                x for x in chain if
                x['strike'] == self.strike and
                x['option_type'] == option_type]

            if contracts:
                return Contract(contracts[0])

            return Contract({'ask': 0, 'bid': 0})

            chain = api.Google().option_chain(self.code)
            contract = chain[self.expiry.strftime('%Y-%m-%d')
                ][self.typ][self.strike]
            return contract

        def pprint(self, split):
            change = ((self.cost - self.contract.mid) / self.cost) * 100
            if self.n > 0:
                change *= -1
            split.write('%8s' % self.code, color=color_codes.get(self.code))
            split.write(' ' + self.typ)
            split.write(' %4s' % self.n)
            split.write(' %6.2f' % self.strike)
            split.write(' %6.2f' % self.contract.mid)
            split.write(' %6.2f' % self.cost)
            split.write(' %7.2f' % change)

    days = {}

    lines = open(positions).readlines()
    for line in lines:
        if line.startswith('#'):
            continue
        bits = line.strip().split()
        if len(bits) != 6:
            continue
        code, expiry, strike, typ, n, cost = bits
        expiry = parse(expiry)
        strike = float(strike)
        n = int(n)
        cost = float(cost)
        position = Position(code, expiry, strike, typ, n, cost)
        codes.add(code)
        day = days.setdefault(expiry, Day(expiry))
        day.positions.append(position)

    codes = list(codes)
    for code in codes:
        try:
            to_report = api.Estimize().estimate(code).to_report
            day = days.setdefault(to_report, Day(to_report))
            day.earnings.append(code)
        except:
            pass

    split1 = p.Split()

    days = sorted(days.values(), key=lambda x: x.dt)
    for day in days:
        day.pprint(split1)

    split2 = watch_split(codes, color_codes)

    d = p.D()
    d.render([split1, split2])


def do_portfolio():
    p = portfolio.Portfolio()
    for spread in p.spreads:
        print spread


def do_chain(code, expiry=None, strike=None, offset=None, typ=None):
    nasdaq = api.Nasdaq()
    data = nasdaq.summary(code)
    print '%s %s' % (code.upper(), data['quote'])

    chain = api.Google().option_chain(code)
    if not expiry:
        for expiry in chain:
            print expiry
        return

    price = data['quote']
    if offset:
        price = price + (price*(float(offset)/100))

    if strike:
        strike = float(strike)

    typs = typ and [typ.upper()] or ['C', 'P']

    if '+' in expiry:
        expiry, n = expiry.split('+')
        n = int(n)+1
    else:
        n = 1
    expiry = chain[expiry]

    while True:
        for typ in typs:
            if strike:
                print expiry.togo, expiry[typ].at(strike)
            else:
                print expiry.togo
                for x in expiry[typ].near(price, 3):
                    print '%02.2f' % (((x.ask+x.bid)/2)/expiry.togo), x
        n -= 1
        if not n:
            break
        expiry = expiry.next()


def do_call_spread(code):
    nasdaq = api.Nasdaq()
    data = nasdaq.summary(code)
    print '%s %s' % (code.upper(), data['quote'])
    chain = api.Google().option_chain(code)

    price = data['quote']

    keys = list(sorted(chain.iterkeys()))
    expiry = chain[keys[0]]

    e1 = expiry.next().next()
    print e1
    c1 = e1['C'].at(price*1.02)
    print c1

    print

    e2 = e1.next().next().next().next()
    print e2
    c2 = e2['C'].at(price*1.0)
    print c2

    print
    print e2.togo - e1.togo, c2.mid - c1.mid
    print (float(e2.togo) / e1.togo) * c1.mid


def main(argv):
    if argv.get('stock'):
        return do_stock(argv['<code>'])

    if argv.get('call_spread'):
        return do_call_spread(argv['<code>'])

    if argv.get('trailing'):
        return do_trailing(argv['<code>'])

    if argv.get('scan'):
        return do_scan(argv['<filename>'])

    if argv.get('p'):
        return do_p(argv['<watch>'])

    if argv.get('review'):
        return do_review(argv['<watch>'], argv['<positions>'])

    if argv.get('chain'):
        return do_chain(
            argv['<code>'],
            expiry=argv.get('<expiry>'),
            strike=argv.get('--strike'),
            offset=argv.get('--offset'),
            typ=argv.get('--type'))

    if argv.get('portfolio'):
        return do_portfolio()

    if argv.get('roll'):
        return do_roll(
            argv['<code>'],
            argv['<expiry>'],
            argv['<typ>'],
            float(argv['<strike>']),
            )


if __name__ == '__main__':
    argv = docopt(__doc__, version=__version__)
    sys.exit(main(argv))
